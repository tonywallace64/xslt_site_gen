<page>
  <name>xpath</name>
  <title>xpath</title>
  <url>xpath.html</url>
  <keywords>xml</keywords>
  <pageheader>Greenrose</pageheader>
<content>
<h2>Introduction</h2>
<p>
At the last page Xml namespaces were introduced as a way of incorporating
various xml vocabularies into our documents.  It is time to meet the first
of these vocabularies, xpath, a tool for navigating through xml documents.</p>
<h2>What is XPATH?</h2>
<p><em>Xpath is a language for finding related nodes in an xml document.</em></p>
<p>Xml documents are read into software, and the various parts of the language
are parsed into nodes.</p>
<h3>Xpath Nodes</h3>
<ul>
<li>elements</li>
<li>attributes</li>
<li>comments</li>
<li>whitespace</li>
<li>processing instructions</li>
<li>text</li>
</ul> 
<p>The relationships between
these nodes are stored in a structure known as an xml infoset. XPATH is a language for navigating 
an xml infoset.</p>
<p>XPATH is therefore an xml query language and is itself part of other XML languages
such as XSLT, XQUERY an XPOINTER.  Proficiency with XPATH is therefore a prerequisite
for proficiency in these other languages.</p>
<h2>XPATH axes</h2>
<p>To understand xpath it is necessary to have in mind two models of the xml document at the same time:
<ul>
<li>Xml document as a tree</li>
<li>Xml document as a list</li>
</ul></p>
<p>
If you take any xml document and print it out, and a set of coloured highlighters.  Select a node and call it the current node colour it yellow.  This is the <em>self</em> axis.  Firstly considering the document as a tree, this node will have a parent node, which will in turn have a parent node up until the root node is reached.  Colour each of these pink. In xpath, this is the <em>ancestor</em> axis.  The current node may have children.  Colour these, and their decendents blue, this is the <em>decendent axis</em>.  The uncoloured nodes that are above the current document constitute the <em>preceeding axis</em>, and those uncoloured nodes following the current node are the <em>following axis</em>.  Finally those other nodes with the same parent which are preceeding the current node are <em>preceeding-sibling axis</em>.  The other nodes with the same parent but going down the page are the <em>following-sibling axis</em>.</p>
<p>There are other axes defined in the standard, these are easily derivable from those listed above.</p>
<h2>axis ordering</h2>
<p>In every case the position on the axis is related to how far the node is from the current node.  The parent node is position 1 on the ancestor axis, the grandparent position 2 on the ancestor axis.  These positions are in document or reverse document order.  Document order is how close the node is on the printed page going from top to bottom.  Reverse document order is going on the page from bottom to top. Preceeding and ancestor nodes are in reverse document order, following and decendent nodes in document order.</p>
<h2>location paths</h2>
<p>An xpath expression may result in a node set.  That is a set of qualifying nodes. The expression to find all decendents of the current node is "decendents::node()".  The axis comes first, and then a node test which in this case returns any type of node whatsoever.  A location expression can contain several parts each separated by /.  Each part can be filtered by an expression in [].</p>
<example>
  <title>Find closest ancestor page which has a url node as it's child</title>
  <content>ancestor::page[child::url][position()=1]</content>
</example>   
<h2>Abbreviated syntax</h2>
<p>The abbreviated syntax is as follows:</p>
<ul>
<li><p>omitting an axis is short for "child::"</p></li>
<li><p>"." represents "self::node()"</p></li>
<li><p>".." represents "parent::node()"</p></li>
<li><p>"@" represents "attribute::"</p></li>
<li><p>"//" represents "decendant-or-self::"</p></li>
<li><p>"[number]" represents "[position()=number]"</p></li>
</ul>
<p>Thus the previous example could be written "ancestor::page[url][1]"</p>
</content>
</page>
